// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/csiabb/donation-service/components/aliyun (interfaces: IALiYunBackend)

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockIALiYunBackend is a mock of IALiYunBackend interface
type MockIALiYunBackend struct {
	ctrl     *gomock.Controller
	recorder *MockIALiYunBackendMockRecorder
}

// MockIALiYunBackendMockRecorder is the mock recorder for MockIALiYunBackend
type MockIALiYunBackendMockRecorder struct {
	mock *MockIALiYunBackend
}

// NewMockIALiYunBackend creates a new mock instance
func NewMockIALiYunBackend(ctrl *gomock.Controller) *MockIALiYunBackend {
	mock := &MockIALiYunBackend{ctrl: ctrl}
	mock.recorder = &MockIALiYunBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIALiYunBackend) EXPECT() *MockIALiYunBackendMockRecorder {
	return m.recorder
}

// IsExist mocks base method
func (m *MockIALiYunBackend) IsExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist
func (mr *MockIALiYunBackendMockRecorder) IsExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockIALiYunBackend)(nil).IsExist), arg0)
}

// UploadObject mocks base method
func (m *MockIALiYunBackend) UploadObject(arg0 string, arg1 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadObject indicates an expected call of UploadObject
func (mr *MockIALiYunBackendMockRecorder) UploadObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadObject", reflect.TypeOf((*MockIALiYunBackend)(nil).UploadObject), arg0, arg1)
}
