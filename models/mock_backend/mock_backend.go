// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/csiabb/donation-service/models (interfaces: IDBBackend)

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	models "github.com/csiabb/donation-service/models"
	structs "github.com/csiabb/donation-service/structs"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockIDBBackend is a mock of IDBBackend interface
type MockIDBBackend struct {
	ctrl     *gomock.Controller
	recorder *MockIDBBackendMockRecorder
}

// MockIDBBackendMockRecorder is the mock recorder for MockIDBBackend
type MockIDBBackendMockRecorder struct {
	mock *MockIDBBackend
}

// NewMockIDBBackend creates a new mock instance
func NewMockIDBBackend(ctrl *gomock.Controller) *MockIDBBackend {
	mock := &MockIDBBackend{ctrl: ctrl}
	mock.recorder = &MockIDBBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDBBackend) EXPECT() *MockIDBBackendMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockIDBBackend) CreateAccount(arg0 *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockIDBBackendMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockIDBBackend)(nil).CreateAccount), arg0)
}

// CreateFunds mocks base method
func (m *MockIDBBackend) CreateFunds(arg0 *models.PubFunds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFunds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFunds indicates an expected call of CreateFunds
func (mr *MockIDBBackendMockRecorder) CreateFunds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunds", reflect.TypeOf((*MockIDBBackend)(nil).CreateFunds), arg0)
}

// CreateOrganizations mocks base method
func (m *MockIDBBackend) CreateOrganizations(arg0 *models.DonationStat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganizations indicates an expected call of CreateOrganizations
func (mr *MockIDBBackendMockRecorder) CreateOrganizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizations", reflect.TypeOf((*MockIDBBackend)(nil).CreateOrganizations), arg0)
}

// CreateSupplies mocks base method
func (m *MockIDBBackend) CreateSupplies(arg0 *models.PubSupplies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupplies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSupplies indicates an expected call of CreateSupplies
func (mr *MockIDBBackendMockRecorder) CreateSupplies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupplies", reflect.TypeOf((*MockIDBBackend)(nil).CreateSupplies), arg0)
}

// DBTransactionCommit mocks base method
func (m *MockIDBBackend) DBTransactionCommit(arg0 *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBTransactionCommit", arg0)
}

// DBTransactionCommit indicates an expected call of DBTransactionCommit
func (mr *MockIDBBackendMockRecorder) DBTransactionCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTransactionCommit", reflect.TypeOf((*MockIDBBackend)(nil).DBTransactionCommit), arg0)
}

// DBTransactionRollback mocks base method
func (m *MockIDBBackend) DBTransactionRollback(arg0 *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBTransactionRollback", arg0)
}

// DBTransactionRollback indicates an expected call of DBTransactionRollback
func (mr *MockIDBBackendMockRecorder) DBTransactionRollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTransactionRollback", reflect.TypeOf((*MockIDBBackend)(nil).DBTransactionRollback), arg0)
}

// GetDBTransaction mocks base method
func (m *MockIDBBackend) GetDBTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDBTransaction indicates an expected call of GetDBTransaction
func (mr *MockIDBBackendMockRecorder) GetDBTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBTransaction", reflect.TypeOf((*MockIDBBackend)(nil).GetDBTransaction))
}

// QueryFunds mocks base method
func (m *MockIDBBackend) QueryFunds(arg0, arg1, arg2 string, arg3 *structs.QueryParams) ([]*models.PubFunds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFunds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.PubFunds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFunds indicates an expected call of QueryFunds
func (mr *MockIDBBackendMockRecorder) QueryFunds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFunds", reflect.TypeOf((*MockIDBBackend)(nil).QueryFunds), arg0, arg1, arg2, arg3)
}

// QueryFundsDetail mocks base method
func (m *MockIDBBackend) QueryFundsDetail(arg0 string) (*models.FundsDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFundsDetail", arg0)
	ret0, _ := ret[0].(*models.FundsDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFundsDetail indicates an expected call of QueryFundsDetail
func (mr *MockIDBBackendMockRecorder) QueryFundsDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFundsDetail", reflect.TypeOf((*MockIDBBackend)(nil).QueryFundsDetail), arg0)
}

// QueryOrganizationDetail mocks base method
func (m *MockIDBBackend) QueryOrganizationDetail(arg0 string) (*structs.OrganizationDetailItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrganizationDetail", arg0)
	ret0, _ := ret[0].(*structs.OrganizationDetailItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrganizationDetail indicates an expected call of QueryOrganizationDetail
func (mr *MockIDBBackendMockRecorder) QueryOrganizationDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrganizationDetail", reflect.TypeOf((*MockIDBBackend)(nil).QueryOrganizationDetail), arg0)
}

// QueryOrganizations mocks base method
func (m *MockIDBBackend) QueryOrganizations(arg0 *structs.QueryParams) ([]*structs.OrganizationsItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrganizations", arg0)
	ret0, _ := ret[0].([]*structs.OrganizationsItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrganizations indicates an expected call of QueryOrganizations
func (mr *MockIDBBackendMockRecorder) QueryOrganizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrganizations", reflect.TypeOf((*MockIDBBackend)(nil).QueryOrganizations), arg0)
}

// QueryPubByUserType mocks base method
func (m *MockIDBBackend) QueryPubByUserType(arg0 string, arg1 *structs.QueryParams) ([]*structs.PubUserItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPubByUserType", arg0, arg1)
	ret0, _ := ret[0].([]*structs.PubUserItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPubByUserType indicates an expected call of QueryPubByUserType
func (mr *MockIDBBackendMockRecorder) QueryPubByUserType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPubByUserType", reflect.TypeOf((*MockIDBBackend)(nil).QueryPubByUserType), arg0, arg1)
}

// QuerySupplies mocks base method
func (m *MockIDBBackend) QuerySupplies(arg0, arg1, arg2 string, arg3 *structs.QueryParams) ([]*models.PubSupplies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySupplies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.PubSupplies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySupplies indicates an expected call of QuerySupplies
func (mr *MockIDBBackendMockRecorder) QuerySupplies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySupplies", reflect.TypeOf((*MockIDBBackend)(nil).QuerySupplies), arg0, arg1, arg2, arg3)
}

// QuerySuppliesDetail mocks base method
func (m *MockIDBBackend) QuerySuppliesDetail(arg0 string) (*models.SuppliesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySuppliesDetail", arg0)
	ret0, _ := ret[0].(*models.SuppliesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySuppliesDetail indicates an expected call of QuerySuppliesDetail
func (mr *MockIDBBackendMockRecorder) QuerySuppliesDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySuppliesDetail", reflect.TypeOf((*MockIDBBackend)(nil).QuerySuppliesDetail), arg0)
}
